<!-- Copy everything between these comments and paste it into your Blogger HTML editor -->

<style>
.hover-video-container {
  position: relative;
  display: inline-block;
  cursor: pointer;
  max-width: 100%;
}

.youtube-player {
  width: 100%;
  aspect-ratio: 16/9;
  border: none;
}

.hover-video-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.2);
  display: flex;
  align-items: center;
  justify-content: center;
  transition: opacity 0.3s;
  pointer-events: none;
}

.hover-video-overlay.hidden {
  opacity: 0;
}

.play-icon {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
}

.play-icon::before {
  content: '';
  width: 0;
  height: 0;
  border-style: solid;
  border-width: 12px 0 12px 20px;
  border-color: transparent transparent transparent #000;
  margin-left: 4px;
}
</style>

<!-- Example usage (update data-video-id with your YouTube video ID) -->
<div class="hover-video-container" data-video-id="YOUR_YOUTUBE_VIDEO_ID">
  <div class="youtube-player"></div>
  <div class="hover-video-overlay">
    <div class="play-icon"></div>
  </div>
</div>

<script src="https://www.youtube.com/iframe_api"></script>
<script>
const players = new Map();

function onYouTubeIframeAPIReady() {
  const containers = document.querySelectorAll('.hover-video-container');
  
  containers.forEach((container, index) => {
    const videoId = container.dataset.videoId;
    const playerElement = container.querySelector('.youtube-player');
    
    const player = new YT.Player(playerElement, {
      videoId: videoId,
      playerVars: {
        autoplay: 0,
        controls: 0,
        mute: 1,
        loop: 1,
        modestbranding: 1,
        playsinline: 1,
        rel: 0,
        showinfo: 0,
        playlist: videoId
      },
      events: {
        onReady: (event) => onPlayerReady(event, container),
        onStateChange: onPlayerStateChange
      }
    });
    
    players.set(container, player);
  });
}

function onPlayerReady(event, container) {
  setupEventListeners(container);
}

function onPlayerStateChange(event) {
  if (event.data === YT.PlayerState.ENDED) {
    event.target.playVideo();
  }
}

function setupEventListeners(container) {
  const overlay = container.querySelector('.hover-video-overlay');
  const player = players.get(container);
  
  container.addEventListener('mouseenter', () => {
    if (player && player.playVideo) {
      player.playVideo();
      overlay.classList.add('hidden');
    }
  });
  
  container.addEventListener('mouseleave', () => {
    if (player && player.pauseVideo) {
      player.pauseVideo();
      player.seekTo(0);
      overlay.classList.remove('hidden');
    }
  });
  
  container.addEventListener('touchstart', (e) => {
    e.preventDefault();
    if (!player || !player.getPlayerState) return;
    
    if (player.getPlayerState() !== YT.PlayerState.PLAYING) {
      player.playVideo();
      overlay.classList.add('hidden');
    } else {
      player.pauseVideo();
      player.seekTo(0);
      overlay.classList.remove('hidden');
    }
  });
}
</script>

<!-- End of code to copy -->
